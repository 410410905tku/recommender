import re
import database  # 導入 database.py 中的功能
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import pandas as pd

try:
    # 使用 database.py 中的函數連接數據庫並執行查詢
    professor_history = database.query_database()

    # 轉換文本為數值
    vectorizer = TfidfVectorizer(stop_words='english')
    tfidf_matrix = vectorizer.fit_transform(professor_history['Sub_Name'])

    # 調整TF-IDF權重
    # 創建一個字典來記錄每個課程的出現次數
    course_counts = {}
    for course in professor_history['Sub_Name']:
        course_counts[course] = course_counts.get(course, 0) + 1

    # 根據出現次數調整TF-IDF權重
    for i, course in enumerate(vectorizer.get_feature_names_out()):
        if course in course_counts:
            tfidf_matrix[:, i] /= (course_counts[course] + 1) ** 0.5

    # 輸入指定教授
    while True:
        target_professor_chinese_name = input("請輸入教授的中文姓名：")
        if re.match(r'^[\u4e00-\u9fa5]+$', target_professor_chinese_name):
            break
        else:
            print("請輸入中文姓名。")

    # 使用正則表達式找到符合輸入中文姓名的教授記錄
    target_professor_pattern = re.escape(target_professor_chinese_name)
    target_records = professor_history[professor_history['Teacher'].str.contains(target_professor_pattern)]

    if not target_records.empty:
        target_index = target_records.index[0]

        similarity_matrix = cosine_similarity(tfidf_matrix, dense_output=False)

        similarity_scores = similarity_matrix[:, target_index].toarray().flatten()
        sorted_indices = similarity_scores.argsort()[::-1]

        # 紀錄課程
        recommended_courses = set()

        # 紀錄前五名相似度最高的教授
        similar_professors = []

        for index in sorted_indices:
            professor_name = professor_history.iloc[index]['Teacher']
            if professor_name not in similar_professors:
                similar_professors.append(professor_name)
                courses_by_professor = professor_history[professor_history['Teacher'] == professor_name]['Sub_Name']

                for course in courses_by_professor:
                    if course not in professor_history.loc[target_index, 'Sub_Name']:
                        recommended_courses.add(course)

                if len(similar_professors) >= 5:
                    break

        print(f"Top 5 similar professors for professor {target_professor_chinese_name}:")
        for i, professor in enumerate(similar_professors, 1):
            print(f"{i}. {professor}")

        print(f"\nTop recommended courses for professor {target_professor_chinese_name}:")
        
        # 計算目標教授與推薦課程的相似度並排序
        target_courses_tfidf = tfidf_matrix[target_index]
        course_similarity_scores = cosine_similarity(tfidf_matrix, target_courses_tfidf)
        sorted_course_indices = course_similarity_scores.flatten().argsort()[::-1]

        # 前10個
        output_count = 0
        recommended_professors = set()  
        recommended_courses_chinese = []
        recommended_courses_english = []
        for index in sorted_course_indices:
            if output_count >= 10:
                break
            course_name = professor_history.iloc[index]['Sub_Name']
            professor_name = professor_history.iloc[index]['Teacher']
            if course_name in recommended_courses and professor_name not in recommended_professors:
                chinese, english = course_name.split('\n')
                recommended_courses_chinese.append(chinese)
                recommended_courses_english.append(english)
                recommended_courses.remove(course_name)  
                recommended_professors.add(professor_name)
                output_count += 1

        print("中文課程名稱:")
        for course_chinese in recommended_courses_chinese:
            print(course_chinese)
        
        print("\n英文課程名稱:")
        for course_english in recommended_courses_english:
            print(course_english)

    else:
        print(f"找不到教授 {target_professor_chinese_name} 的歷史記錄")

except Exception as e:
    print("發生錯誤：", e)


